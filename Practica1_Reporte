Facultad de Ingeniería
Técnicas de Programación - Ingeniería Mecatrónica
Clases y objetos
No de práctica: 1

Objetivos de aprendizaje
I. Objetivos generales: Entender la diferencia entre clase y objeto.

II. Objetivos específicos:

Aprender a diseñar clases.
Entender el funcionamiento de los constructores.
Identificar los atributos y los métodos.
Aprender a crear objetos.
Introducción
Una definición de clase o estructura es como un plano que especifica qué puede hacer el tipo.
Un objeto es básicamente un bloque de memoria que se ha asignado y configurado de acuerdo con el plano.
Un programa puede crear muchos objetos de la misma clase. Los objetos también se denominan instancias
y pueden almacenarse en una variable con nombre, o en una matriz o colección. 
Desarrollo
I. Actividad 1 Diseño de una clase

A partir de un objeto real, elija al menos 3 características que lo identifiquen y 2 acciones que definan su comportamiento. 
Posteriormente, realice una abstracción para definir una clase o plantilla para ese tipo de objetos, que incluya un mínimo
de 3 atributos de diferentes tipos (enteros, flotantes, cadenas, booleanos, etc.) y al menos 6 métodos que sean necesarios 
para escribir/leer los valores de los atributos y/o para interactuar con los objetos.
Incluya también al menos 2 constructores para la clase.

        público  Mascota ()
        {
           Raza  =  " pitbull " ;
           peso  =  8 ;
           Sexo  =  " Macho " ;
           Tama ñ o  =  " grande " ;
        }
         Mascota público ( raza de cuerda  , peso int , cuerda sexo , cadena tama ño)   
        {
            Raza  =  raza ;
            peso  =  Peso ;
            Sexo  =  sexo ;
            Tama ñ o  =  tama ñ o ;
        }
        
        II. Actividad 2 Creación de objetos

Mediante la creación de objetos, realice pruebas de escritorio para verificar el funcionamiento correcto de su clase y, de ser necesario, realice los ajustes y correcciones adecuados. Las pruebas deben incluir, sin limitarse a ello, los siguientes puntos:

Verificación de todos los constructores implementados.
Comprobación de la correcta asignación de valores a cada uno de los atributos definidos.
Verificación de todos los métodos programados.
usando el  sistema ;
usando el  sistema . Colecciones . Genérico ;
usando el  sistema . Linq ;
usando el  sistema . Texto ;
usando el  sistema . Enhebrado . tareas ;

namespace  perro
{
    clase  Perro

    {
         enum  público TIPOSDECOMIDA { CROQUETAS , BASURA , AGUA };

         vacío  estático Principal ( cadena [] args )
        {
            bool  alimentado  =  falso ;
            Mascota  Perro1  =  nueva  Mascota ();

                Perro1 . Raza  =  " French Puddle " ;
                Perro1 . peso  =  7 ;
                Perro1 . Sexo  =  " Macho " ;
                Perro1 . Tama ñ o  =  " Pequeña " ;

           alimentado  =  Perro1 . Comer (( int ) TIPOSDECOMIDA . BASURA );
            si ( alimentado )
            {
                Consola . WriteLine ( " el perro "  +  Perro1 . Raza  +  " comio "  +  Convertir . ToString ( TIPOSDECOMIDA . BASURA ));
            }
            más
            {
                Consola . WriteLine ( " el perro no ha sido alimentado " );
            }

            Consola . Leer ();

            Mascota  Perro2  =  nueva  Mascota ();
            Consola . WriteLine ( " el perro "  +  Perro2 . Raza  +  " comio "  +  Convertir . ToString ( TIPOSDECOMIDA . BASURA ));
            Consola . Leer ();

            Mascota  Perro3  =  nueva  Mascota ( " XD " , 15 , " hembra " , " pequeño " );
            Consola . WriteLine ( " el perro "  +  Perro3 . Raza  +  " comio "  +  Convertir . ToString ( TIPOSDECOMIDA . BASURA ));
            Consola . Leer ();

        }
    }
}
Bibliografía
CEBALLOS SIERRA, Francisco Javier. Microsoft C#. Curso de programación. México, Alfaomega, 2007
DEITEL, Harvey y Deitel, PAUL. C# Cómo programar. España, Pearson, 2007
LÓPEZ ROMÁN, Leobardo. Metodología de la programación orientada a objetos. México, Alfaomega, 2007
